require("./NeuQuant.js");

var t = require("./LZWEncoder.js");

"undefined" != typeof exports && (exports.GIFEncoder = function() {
    function e() {
        this.bin = [];
    }
    for (var n = 0, r = {}; n < 256; n++) r[n] = String.fromCharCode(n);
    e.prototype.getData = function() {
        for (var t = "", e = this.bin.length, n = 0; n < e; n++) t += r[this.bin[n]];
        return t;
    }, e.prototype.writeByte = function(t) {
        this.bin.push(t);
    }, e.prototype.writeUTFBytes = function(t) {
        for (var e = t.length, n = 0; n < e; n++) this.writeByte(t.charCodeAt(n));
    }, e.prototype.writeBytes = function(t, e, n) {
        for (var r = n || t.length, i = e || 0; i < r; i++) this.writeByte(t[i]);
    };
    var i, o, u, a, c, f, y, s, w, l, B, d = {}, h = null, p = -1, g = 0, m = !1, v = 7, b = -1, F = !1, U = !0, E = !1, T = 10, j = "Generated by jsgif (https://github.com/antimatter15/jsgif/)", C = (d.setDelay = function(t) {
        g = Math.round(t / 10);
    }, d.setDispose = function(t) {
        t >= 0 && (b = t);
    }, d.setRepeat = function(t) {
        t >= 0 && (p = t);
    }, d.setTransparent = function(t) {
        h = t;
    }, d.setComment = function(t) {
        j = t;
    }, d.addFrame = function(t, e, n, r) {
        return L(t, e), U && (G(), S(), p >= 0 && P()), R(n, r), "" !== j && A(), D(), U || S(), 
        q(), U = !1, !0;
    }, d.download = function(t) {
        if (null === f || 0 == F) console.log("Please call start method and add frames and call finish method before calling download"); else {
            t = void 0 !== t ? t.endsWith(".gif") ? t : t + ".gif" : "download.gif";
            var e = document.createElement("a");
            e.download = t, e.href = URL.createObjectURL(new Blob([ new Uint8Array(f.bin) ], {
                type: "image/gif"
            })), e.click();
        }
    }, d.finish = function() {
        if (!m) return !1;
        var t = !0;
        m = !1;
        try {
            f.writeByte(59), F = !0;
        } catch (e) {
            t = !1;
        }
        return t;
    }, function() {
        c = 0, y = null, s = null, w = null, B = null, F = !1, U = !0;
    }), L = (d.setFrameRate = function(t) {
        15 != t && (g = Math.round(100 / t));
    }, d.setQuality = function(t) {
        t < 1 && (t = 1), T = t;
    }, d.setSize = function(t, e, n, r) {
        o = e, u = n, a = r, (i = t) < 1 && (i = 320), o < 1 && (o = 240), E = !0;
    }, d.start = function() {
        C();
        var t = !0;
        F = !1, f = new e();
        try {
            f.writeUTFBytes("GIF89a");
        } catch (e) {
            t = !1;
        }
        return m = t;
    }, d.cont = function() {
        return C(), F = !1, f = new e(), m = !0;
    }, function(t, e) {
        w = t, B = e, t = null, l = 8, v = 7;
    }), R = function(t, e) {
        f.writeByte(33), f.writeByte(249), f.writeByte(4);
        var n;
        n = null === t ? 0 : 1, e <<= 2, f.writeByte(0 | e | n), W(g), f.writeByte(t || 0), 
        f.writeByte(0);
    }, A = function() {
        f.writeByte(33), f.writeByte(254), f.writeByte(j.length), f.writeUTFBytes(j), f.writeByte(0);
    }, D = function() {
        f.writeByte(44), W(u || 0), W(a || 0), W(i), W(o), U ? f.writeByte(0) : f.writeByte(128 | v);
    }, G = function() {
        W(i), W(o), f.writeByte(240 | v), f.writeByte(0), f.writeByte(0);
    }, P = function() {
        f.writeByte(33), f.writeByte(255), f.writeByte(11), f.writeUTFBytes("NETSCAPE2.0"), 
        f.writeByte(3), f.writeByte(1), W(p), f.writeByte(0);
    }, S = function() {
        f.writeBytes(B);
        for (var t = 768 - B.length, e = 0; e < t; e++) f.writeByte(0);
    }, W = function(t) {
        f.writeByte(255 & t), f.writeByte(t >> 8 & 255);
    }, q = function() {
        new t.LZWEncoder(i, o, w, l).encode(f);
    };
    d.stream = function() {
        return f;
    }, d.setProperties = function(t, e) {
        m = t, U = e;
    };
    return d;
});